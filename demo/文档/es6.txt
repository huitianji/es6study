

【1】

npm install --save-dev babel-cli

+ "scripts": {
+     "build": "babel src -d lib"
+   },

npm install babel-preset-env --save-dev

.babelrc

{
  "presets": ["env"]
}

【2】

6.3实时转码
     安装gulp-watch
     npm install --save-dev gulp-babel

     配置gulpfile文件
     var gulp = require("gulp"),
          babel = require("gulp-babel"),
         watch = require("gulp-watch");

     gulp.task("babeljs", function () {
       return gulp.src("www/js/*.js")
         .pipe(babel())
         .pipe(gulp.dest("dist/js"));
     });
     gulp.task("watch",function(){
        gulp.watch('www/js/*.js',['babeljs']);
     })

     gulp.task('default',['watch','babeljs']);


3. 使用 browserify
如果我们使用了ES6中的 module，通过 import、export 进行模块化开发，那么通过babel转码后，
 import 、 export 将被转码成符合CMD规范的 require 和 exports 等，但是浏览器还是不认识，
 这时可以使用 bowserify 对代码再次进行构建。产生文件为 bundle.js

 npm install --save-dev browserify

【3】
npm install babel-loader babel-core webpack --save-dev


npm install babel-loader babel-core babel-preset-env webpack












 "devDependencies": {
     "babel-cli": "^6.26.0",
     "babel-core": "^6.26.0",
     "babel-loader": "^7.1.4",
     "babel-preset-env": "^1.6.1",
     "babel-preset-es2015": "^6.24.1",
     "eslint": "^4.19.0",
     "eslint-config-airbnb": "^16.1.0",
     "eslint-plugin-import": "^2.9.0",
     "gulp": "^3.9.1",
     "gulp-babel": "^8.0.0-beta.2",
     "gulp-load-plugins": "^1.5.0",
     "webpack": "^4.1.1"
   }

