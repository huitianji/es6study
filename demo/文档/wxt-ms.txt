1.json的函数或者方法

//使用json来定义函数,在里面可以定义多个函数
  var method={
          add:function(a,b){
              return a+b;
          },
          add2:function(a,b){
              return a+b;
          },
          add3:function(a,b){
              return a+b;
          },
  };
  var temp = method.add2(31, 4);
  alert(temp);



2.除了ajax还有什么刷新页面方式

iframe

3.实现一个三栏布局（用多种方法，float和Flexbox）

.flex-container {
  display: flex;
}
.flex-item{}


4.有几种事件，onclick，onblur等


5json请求三个api有两个返回有一个没有返回怎么办


6.web安全性
javascript离不开：“<”、“>”、“(”、“）”、“;”...等等，所以我们只需要在输入或输出时对其进行字符过滤或转义处理
允许可输入的字符串长度限制
定一定要在Web Server那一端去完成
7.XSS原理

1.攻击者对某含有漏洞的服务器发起XSS攻击（注入JS代码）

2.诱使受害者打开受到攻击的服务器URL（邮件、留言等，此步骤可选项）

3.受害者在Web浏览器中打开URL，恶意脚本执行。

8.登录页面栏怎么限制只写邮箱或电话


//邮箱规则表达式
function CheckVal(){
var myreg = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/;

//电话号码规则
var phone =/^\d{7,8}$/;

if(文本框值=="" || myreg.test(文本框值) ||phone.test(文本框值)){
   return true;
}
else{
    alert("输入信息有误");
    return false;
}
}


-----------------【零散】----------------
伪类种类




--------------------------xxx 2-----------------


3）CommonJs，AMD，CMD规范(http://blog.csdn.net/vuturn/article/details/51970567)
该规范的主要内容是：模块必须通过  module.exports导出对外的变量或接口，通过require()来导入其他模块的输出到当前模块。

AMD规范其实只有一个主要接口 define(id,dependencies,factory)，它要在声明模块的时候指定所有的依赖dependencies，
并且还要当做形参传到factory中，对于依赖的模块提前执行，依赖前置

define("module", ["dep1", "dep2"], function(d1, d2) {
  return someExportedValue;
});
require(["module", "../file"], function(module, file) { /* ... */ });

cmd

define(function(require, exports, module) {
  var $ = require('jquery');
  var Spinning = require('./spinning');
  exports.doSomething = ...
  module.exports = ...
})



------------xxx3---------
// 设置cookie在当天指定时间点过期并提示
function setCookie(name,value,Deadline,callback){
// 获取当前日期对象
    var curDate = new Date();
// 获取当前日期对应的时间戳
    var curTime = curDate.getTime();
// 获取指定时间的时间戳
    var endTime = convertTime(curDate,Deadline);
// 计算出指定时间与当前时间的时间差
    var disTime = endTime - curTime;
// 设置cookie过期时间
    document.setCookie = name + '=' + value + ';expires=' + disTime;
// 在指定时间到达后执行回调
    setTimeout(callback,disTime);

    console.log(disTime);
}
setCookie('name','value0','18:41:00',function(){
    alert('cookie过期了');
});
// 获取指定时间的时间戳
function convertTime(nowDate,Deadline){
// 分割参数Deadline
    var _dateArr = Deadline.split(':');
// 分别获取参数中对应的时、分、秒
    var hours = parseInt(_dateArr[0]);
    var minutes = parseInt(_dateArr[1]);
    var seconds = parseInt(_dateArr[2]);
// 设置对应时分秒
    nowDate.setHours(hours);
    nowDate.setMinutes(minutes);
    nowDate.setSeconds(seconds);
// 获取当前天中指定时分秒对应的毫秒数
    var result = Date.parse(nowDate);
    return result;
}





-------------------------cookie---------------------------------
var Util = Util || {};

Util.cookie = {
    add: function(name, value, iDay, domain){
        if(!iDay) return;

        var oDate = new Date();
        //setMinutes()
        //oDate.setDate(oDate.getDate() + iDay);
        //设置分钟
        oDate.setMinutes(oDate.getMinutes() + 30);//iDay=30临时写死
        //
        if ( domain ) {
            document.cookie = name + '=' + value + ';path=/;expires=' + oDate.toGMTString() + ';domain=' + (domain || '.xx.com');
        }else {
            document.cookie = name + '=' + value + ';path=/;expires=' + oDate.toGMTString();
        }

    },
    get: function(name){
        var cookies = document.cookie.split('; ');
        for(var i = 0, len = cookies.length; i < len; i++){
            var arr = cookies[i].split('=');
            if(arr[0] == name) return arr[1];
        }
        return '';
    },
    set: function (name, value, iDay) {
        if(!iDay) return;

        var oDate = new Date();
        //oDate.setDate(oDate.getDate() + iDay);
        //设置分钟
        oDate.setMinutes(oDate.getMinutes() + 30);//iDay=30分钟临时写死

        var cookies = document.cookie.split('; ');
        for(var i = 0, len = cookies.length; i < len; i++){
            var arr = cookies[i].split('=');
            if(arr[0] == name) {
                document.cookie = name + '=' + value + ';path=/;expires=' + oDate.toGMTString();
            }
        };
    },
    del: function(name, domain){
        if ( domain ) {
            document.cookie = name + "=;path=/;expires=" + (new Date(0)).toGMTString() + ';domain=' + (domain || '.xx.com');
        }else {
            document.cookie = name + "=;path=/;expires=" + (new Date(0)).toGMTString();
        }

    },
    clearAll: function () {
        var keys=document.cookie.match(/[^ =;]+(?=\=)/g);
        if (keys) {
            for (var i = keys.length; i--;){
                document.cookie=keys[i]+'=0;path=/;expires=' + new Date(0).toUTCString();
            }
        }
    }
};




==============**document.location.protocol**==================
JavaScript 判断当前协议是http还是https
document.location.protocol



=================================================================
一、html+css部分、

（1）css盒模型，可能会要求手写一个布局，这个布局基本上用到的css是margin的负值，
boxing-sizing：border-box，布局尽量往这方面想。浏览器布局的基本元素是盒，
在w3c的标准模式下，width=width，
但是在怪异模式下，width=border*2+padding*2+width;其中后代元素的width：100%；参照的是右边的那个width，
(2）html5的新特性
1、标签语义化，比如header，footer，nav，aside，article，section等，新增了很多表单元素，入email，url等，
除去了center等样式标签，还有除去了有性能问题的frame，frameset等标签

2、音视频元素，video，audio的增加使得我们不需要在依赖外部的插件就可以往网页中加入音视频元素。

3、新增很多api，比如获取用户地理位置的window.navigator.geoloaction，

4、websocket

websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端，

5、webstorage，webstorage是本地存储，存储在客户端，包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，
只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，
但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，
6、缓存

html5允许我们自己控制哪些文件需要缓存，

7、web worker，web worker是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，
然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。

（3）对html5的语义话的理解
html5的语义化指的是用正确的标签包含正确的内容，比如nav标签，里面就应该包含导航条的内容，而不是用做其他的用途，
标签语义化的好处就是结构良好，便于阅读，方便威化，也有利于爬虫的查找，提高搜索率。

（4）cookie，sessionStorage，localeStorage的区别

cookie是存储在浏览器端，并且随浏览器的请求一起发送到服务器端的，它有一定的过期时间，到了过期时间自动会消失。
sessionStorage和localeStorage也是存储在客户端的，同属于web Storage，比cookie的存储大小要大有8m，cookie只有4kb，
localeStorage是持久化的存储在客户端，如果用户不手动清除的话，不会自动消失，会一直存在，
sessionStorage也是存储在客户端，但是它的存活时间是在一个回话期间，只要浏览器的回话关闭了就会自动消失。

（5）多个页面之间如何进行通信

使用cookie，使用web worker，使用localeStorage和sessionStorage

（6）浏览器的渲染过程

1、首先获取html，然后构建dom树
2、其次根据css构建render树，render树中不包含定位和几何信息
3、最后构建布局数，布局是含有元素的定位和几何信息

（7）重构、回流

浏览器的重构指的是改变每个元素外观时所触发的浏览器行为，
比如颜色，背景等样式发生了改变而进行的重新构造新外观的过程。重构不会引发页面的重新布局，不一定伴随着回流，

回流指的是浏览器为了重新渲染页面的需要而进行的重新计算元素的几何大小和位置的，
他的开销是非常大的，回流可以理解为渲染树需要重新进行计算，一般最好触发元素的重构，
避免元素的回流；比如通过通过添加类来添加css样式，而不是直接在DOM上设置，当需要操作某一块元素时候，最好使其脱离文档流，
这样就不会引起回流了，比如设置position：absolute或者fixed，或者display：none，等操作结束后在显示。
二、JavaScript部分
（1）JavaScript的数据类型

基本数据类型：Number，String，Boolean，Undefined，Null

复杂数据类型：Object，Array，Function，RegExp，Date，Error

全局数据类型：Math

（2）JavaScript的闭包
闭包简单的说就是一个函数能访问外部函数的变量，这就是闭包，比如说：


function a(x){
       var tem=3;
      function b(y){
          console.log(x+y+(++tem));
     }
}
a函数中的b函数就是闭包了，b函数可以使用a函数的局部变量，参数，最典型的闭包应该是下面这样，将定义在函数中的函数作为返回值
（3）new 操作符到底做了什么

首先，new操作符为我们创建一个新的空对象，然后this变量指向该对象，

其次，空对象的原型执行函数的原型，

最后，改变构造函数内部的this的指向

代码如下：

var obj={};
obj.__proto__=fn.prototype;
fn.call(obj);
（4）改变函数内部this指针的指向函数

call和apply，假设要改变fn函数内部的this的指向，指向obj，那么可以fn.call(obj);或者fn.apply(obj);
那么问题来了，call和apply的区别是什么，其是call和apply的区别在于参数，他们两个的第一个参数都是一样的，表示调用该函数的对象，
apply的第二个参数是数组，是[arg1,arg2,arg3]这种形式，而call是arg1,arg2,arg3这样的形式。还有一个bind函数，

var bar=fn.bind(obj);那么fn中的this就指向obj对象了，bind函数返回新的函数，这个函数内的this指针指向obj对象。

（5）JavaScript的作用域和作用域链

JavaScript的作用域指的是变量的作用范围，内部作用域由函数的形参，实参，局部变量，函数构成，
内部作用域和外部的作用域一层层的链接起来形成作用域链，当在在函数内部要访问一个变量的时候，
首先查找自己的内部作用域有没有这个变量，如果没有就到这个对象的原型对象中去查找，还是没有的话，
就到该作用域所在的作用域中找，直到到window所在的作用域，每个函数在声明的时候就默认有一个外部作用域的存在了，比如：

var t=4;
function foo(){
       var tem=12;
      funciton bar(){
       var temo=34;
       console.log(t+" "+tem+" "+temo);
      }
}
bar找t变量的过程就是，先到自己的内部作用域中找，发现没有找到，然后到bar所在的最近的外部变量中找，
也就是foo的内部作用域，还是没有找到，再到window的作用域中找，结果找到了



（6）JavaScript的继承
function A(){}
function B(age,name){  this.age=age;A.call(this,name); }
B.prototype=new A("mbj");


（8）JavaScript事件模型

原始事件模型，捕获型事件模型，冒泡事件模型，

原始事件模型就是ele.onclick=function(){}这种类型的事件模型

冒泡事件模型是指事件从事件的发生地（目标元素），一直向上传递，直到document，

捕获型则恰好相反，事件是从document向下传递，直到事件的发生地（目标元素）

IE是只支持冒泡事件模型的，下面是兼容各个浏览器的事件监听代码

EventUtil={
  addListener:function(target,type,handler){
    if(target.addEventListener){
        target.addEventListener(type,handler);
    }else if(target.attachEvent){
        target.attach("on"+type,function(){
              handler.call(target);  //让handler中的this指向目标元素
        });
    }else{
        target["on"+type]=handler;
    }
  },
 removeListener:function(target,type,handler){
      if(target.removeEventListener){
        target.removeEventListener(type,handler);
     }else if(target.detachEvent){
        target.detachEvent("on"+type,handler);
     }else{
        target["on"+type]=null;
     }
  },
 getEvent:function(e){      //获取事件对象
     var evt=window.event||e;
     return evt;
 },
 getTarget:function(e){      //获得目标对象
     var evt=EventUtil.getEvent(e);
     var target;
     if(evt.target){ target=evt.target;}
     else {target=evt.srcElement;}
     return target;
 },
 stopPropagation:function(e){  //停止冒泡
     var evt=EventUtil.getEvent(e);
     if(evt.stopPropagation) {evt.stopPropagation();}
     else {evt.cancelBubble=true;}
 },
 preventDefault:function(e){   //阻值默认行为的发生
     var evt=EventUtil.getEvent(e);
     if(evt.preventDefault){ evt.preventDefault(); }
     else {e.returnValue=false;}
 }
}

（9）内存泄漏

内存泄漏指的是浏览器不能正常的回收内存的现象

（10）浏览器的垃圾回收机制

垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存，
内存泄露和浏览器实现的垃圾回收机制息息相关， 而浏览器实现标识无用变量的策略主要有下两个方法：

第一，引用计数法

跟踪记录每个值被引用的次数。当声明一个变量并将引用类型的值赋给该变量时，则这个值的引用次数就是1。
如果同一个值又被赋给另一个变量，则该值的引用次 数加1.相反，如果包含对这个值引用的变量又取得另外一个值，
则这个值的引用次数减1.当这个值的引用次数变成0时，则说明没有办法访问这个值了，因此就 可以将其占用的内存空间回收回来。

如： var a = {};     //对象{}的引用计数为1
     b = a;          //对象{}的引用计数为 1+1
     a = null;       //对象{}的引用计数为2-1
所以这时对象{}不会被回收;

IE 6, 7 对DOM对象进行引用计数回收， 这样简单的垃圾回收机制，非常容易出现循环引用问题导致内存不能被回收， 进行导致内存泄露等问题，一般不用引用计数法。
第二，标记清除法

（11）同源策略

同源策略是浏览器有一个很重要的概念。所谓同源是指，域名，协议，端口相同。不同源的客户端脚本(javascript、ActionScript)
在没明确授权的情况下，不能读写对方的资源。
简单的来说，浏览器允许包含在页面A的脚本访问第二个页面B的数据资源，这一切是建立在A和B页面是同源的基础上。
（12）跨域的几种方式

jsonp（利用script标签的跨域能力）跨域、websocket（html5的新特性，是一种新协议）跨域、设置代理服务器
（由服务器替我们向不同源的服务器请求数据）、CORS（跨源资源共享，cross origin resource sharing）、iframe跨域、
postMessage(包含iframe的页面向iframe传递消息)




（13）异步和同步

同步指下一个程序的执行需要等到上一个程序执行完毕，也就是得出结果后下一个才能执行，

异步指的是上一个程序指向后，下一个程序不用等到上一个程序出结果就能执行，等上一个出结果了调用回调函数处理结果就好。

（14）JavaScript的值类型和引用类型

JavaScript有两种类型的数据，值类型和引用类型，一般的数字，字符串，布尔值都是值类型，存放在栈中，而对象，函数，数组等是引用类型，存放在堆中，
对引用类型的复制其实是引用复制，相当于复制着地址，对象并没有真正的复制。
6）前端优化（提高网页的加载速度）

1、使用css sprites，可以有效的减少http请求数

2、使用缓存

3、压缩js，css文件，减小文件体积

4、使用cdn，减小服务器负担

5、懒加载图片

6、预加载css，js文件

7、避免dom结构的深层次嵌套

8、给DOM元素添加样式时，把样式放到类中，直接给元素添加类，减少重构，回流




$.ajax({
    url:'http://www.baidu.com',
    type:'POST',
    data:data,
    cache:true,
    headers:{},
    beforeSend：function(){},
    success:function(){},
    error:function(){},
    complete:function(){}
});



JavaScript中如何检测一个变量是一个String类型？请写出函数实现


方法1、
function isString(obj){
    return typeof(obj) === "string"? true: false;
    // returntypeof obj === "string"? true: false;
}
方法2、
function isString(obj){
    return obj.constructor === String? true: false;
}
方法3.
function isString(obj){
     return Object.prototype.toString.call(obj) === "[object String]"?true:false;
}
如：
var isstring = isString('xiaoming');
console.log(isstring);  // true
--------------------------------[4]----------------------------------------
1.什么是vue生命周期 ?

vue实例从被创建到销毁的一系列过程就叫vue生命周期. 也就是从开始创建、初始化数据、编译模版、挂载DOM→渲染、更新、渲染、卸载等一系列过程。

2.axios的特点有哪些

axios是一个基于promise的HTTP库,支持promise的所有API
它可以拦截请求和响应
它可以转换请求数据和响应数据,并对响应回来的内容自动转换为json类型的数据
它安全性更高,客户端支持防御XSRF

3.vue父组件怎么给子组件传值?

父组件的数据要通过prop传到子组件

5.active-class是哪个组件的属性?嵌套路由怎么定义?

vue-router模块的router-link组件

const routes = [
    { path: "/", redirect: "/home" },//重定向,指向了home组件
    {
        path: "/home", component: home,
       children: [
           { path: "/home/game", component: game }
        ]
   }
]

6.谈谈javascript数组排序方法sort()的使用,重点介绍参数使用及内部机制?

语法：arrayObject.sort(sortby)

参数sortby可选，规定排序顺序，必须是函数

注：如果调用该方法是没有使用参数，将按字符编码的顺序进行排序，要实现这一点，首先应把数组的元素都转换成字符串，以便进行比较。

如果想按照其他的标准进行排序，就需要两个比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对排序的数字。
比较函数应该具有两个参数a和b，其返回值如下：

若a<b，则返回一个小于0的值

若a=b，则返回一个0

若a>b，则返回一个大于0的值


8.说几条XHTML规范的内容(至少3条)

所有的标记都必须有一个相应的结束标记
所有标签的元素和属性的名字都必须使用小写
所有的xml标记都必须合理嵌套
所有的属性值都必须用引号“”括起来
所有的<和&特殊符号用编码表示
给所有属性赋一个值

13.json和jsonp的区别?

json返回的是一串json格式数据；而jsonp返回的是脚本代码（包含一个函数调用）

jsonp的全名叫做json with padding，就是把json对象用符合js语法的形式包裹起来以使其他的网站可以请求到，也就是将json封装成js文件传过去。



------------------[5]-------------------------------
Q：什么情况下会碰到跨域问题？有哪些解决方法？

跨域问题是这是浏览器为了安全实施的同源策略导致的，同源策略限制了来自不同源的document、脚本，同源的意思就是两个URL的域名、协议、端口要完全相同。
script标签jsonp跨域、nginx反向代理、node.js中间件代理跨域、后端在头部信息设置安全域名、后端在服务器上设置cors

Q：如何判断一个变量是对象还是数组？

判断数组和对象分别都有好几种方法，其中用prototype.toString.call()兼容性最好。

function isObjArr(variable){
     if (Object.prototype.toString.call(value) === "[object Array]") {
            console.log('value是数组');
       }else if(Object.prototype.toString.call(value)==='[object Object]'){//这个方法兼容性好一点
            console.log('value是对象');
      }else{
          console.log('value不是数组也不是对象')
      }
}
ps：千万不能使用typeof来判断对象和数组，因为这两种类型都会返回"object"。


Q：定时器的执行顺序或机制。
如果代码中设定了一个setTimeout,那么浏览器便会在合适的时间，将代码插入到任务队列中，如果这个时间设为0，
就代表立即插入到队列，但不是立即执行，仍要等待前面代码执行完毕。
所以setTimeout并不能保证执行的时间，是否及时执行取决于javascript 线程拥挤还是空间。

Q：html中title属性和alt属性的区别？

1.<img src="#" alt="alt信息" />
//1.当图片不输出信息的时候，会显示alt信息 鼠标放上去没有信息，当图片正常读取，不会出现alt信息
2.<img src="#" alt="alt信息" title="title信息" />
// 2.当图片不输出信息的时候，会显示alt信息 鼠标放上去会出现title信息
//当图片正常输出的时候，不会出现alt信息，鼠标放上去会出现title信息

外还有一些关于title属性的知识：

title属性可以用在除了base，basefont，head，html，meta，param，script和title之外的所有标签
title属性的功能是提示。额外的说明信息和非本质的信息请使用title属性。title属性值可以比alt属性值设置的更长
title属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。

Q：标准盒子模型与IE怪异盒子模型

这个问题主要会出现在笔试题上面，比如：

<div style="width:100px;height="100px;border:10px;padding:10px;"></div>
这个盒子在w3c标准盒子模型和IE的怪异盒子模型下面它的宽度分别是多少？

标准盒子模型：总宽度=content100px+border 10px*2+padding 10px*2 //140px
怪异盒子模型: 总宽度=content60px+ border 10px*2+padding 10px*2 //100px

ES5的继承和ES6的继承有什么区别？
ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上
ES6的继承机制完全不同，实质上是先创建父类的实例对象this（所以必须先调用父类的super()方法），然后再用子类的构造函数修改this。

Q：翻转一个字符串

这个问题主要在笔试题碰到的多，思路就是先将字符串转成一个数组，然后用数组的reverse()+join()方法。

let a="hello word";
let b=[...str].reverse().join("");//drow olleh








function getJSON(url) {
    return new Promise(function(resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.send();

        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4) {
                if (xhr.status == 200) {
                    try {
                        var response = JSON.parse(xhr.responseText);
                        resolve(response);
                    } catch (e) {
                        reject(e);
                    }
                } else {
                    reject(new Error(xhr.statusText));
                }
            }
        }
    })
}

getJSON(url).then(resp => console.log(resp));



------------------------[fetch]----------------------------------------

/**
 * 将对象转成 a=1&b=2的形式
 * @param obj 对象
 */
function obj2String(obj, arr = [], idx = 0) {
  for (let item in obj) {
    arr[idx++] = [item, obj[item]]
  }
  return new URLSearchParams(arr).toString()
}

/**
 * 真正的请求
 * @param url 请求地址
 * @param options 请求参数
 * @param method 请求方式
 */
function commonFetcdh(url, options, method = 'GET') {
  const searchStr = obj2String(options)
  let initObj = {}
  if (method === 'GET') { // 如果是GET请求，拼接url
    url += '?' + searchStr
    initObj = {
      method: method,
      credentials: 'include'
    }
  } else {
    initObj = {
      method: method,
      credentials: 'include',
      headers: new Headers({
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded'
      }),
      body: searchStr
    }
  }
  fetch(url, initObj).then((res) => {
    return res.json()
  }).then((res) => {
    return res
  })
}

/**
 * GET请求
 * @param url 请求地址
 * @param options 请求参数
 */
function GET(url, options) {
  return commonFetcdh(url, options, 'GET')
}

/**
 * POST请求
 * @param url 请求地址
 * @param options 请求参数
 */
function POST(url, options) {
  return commonFetcdh(url, options, 'POST')
}


import fetch from 'isomorphic-fetch';
import fetchJsonp from 'fetch-jsonp';




解决手机端文本框被键盘遮挡问题

/* 判断手机类型*/
function navtype(){
var typ='';
var u = navigator.userAgent;
if (u.indexOf('Android') > -1 || u.indexOf('Linux') > -1) {//安卓手机
typ='a';
} else if (u.indexOf('iPhone') > -1) {//苹果手机
typ='i';
} else if (u.indexOf('Windows Phone') > -1) {//winphone手机
typ='w';
}
return typ;
}

/* 当前系统为安卓或苹果手sm*/

if(navtype()!=''){

$('input').on('focus', function() {

    var height = $(this).offset().top;

    window.setTimeout(function () {
        document.activeElement.scrollIntoViewIfNeeded();//微信内置浏览器浏览H5页面弹出的键盘遮盖文本框的解决办法
        $('section').animate({scrollTop : height}, "slow", 500);
    });
 };


--------------------------------------------------------
 javascript 怎么将字符串转换为ArrayBuffer


 function char2buf(str){
 var out = new ArrayBuffer(str.length*2);
 var u16a= new Uint16Array(out);
 var strs = str.split("");
 for(var i =0 ; i<strs.length;i++){
 u16a[i]=strs[i].charCodeAt();
 }
 return out;
 }
