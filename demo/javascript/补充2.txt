(10).add(10).reduce(2).add(10)


但是如果你多看两眼(10)不就是普通的10嘛，就是这个10在调用它原型下的add函数，然后后面一串链式调用你懂的！

Number.prototype.add=function(num){
    return this+num;
}
Number.prototype.reduce=function(num){
    return this+num;
}


//2

3. 如下代码：

var fn=function(a,b,c){
    return a+b+c;
}
需要写一个函数，满足

curry(fn)(1)(2)(3)
var fn = function(a,b,c) {
    return a+b+c;
}

function curry(fn) {
    var arr = [],
    mySlice = arr.slice
    fnLen = fn.length;

    function curring() {
        arr = arr.concat(mySlice.call(arguments));
        if(arr.length < fnLen) {
            return curring;
        }
        return fn.apply(this, arr);
    }
    return curring
}
curry(fn)(1)(2)(3);//6
//柯里化
function curry(fn){
    var args = [].slice.call(arguments,1);
    return function(){
        var _args = args.concat([].slice.call(arguments));
        return fn.apply(null,_args);
    }
};



/**================================================================================================**/

https://juejin.im/entry/58ba33a5570c350062125431

-.能否写一个通用的事件侦听器函数？

//Event工具集，from:github.com/markyunmarkyun.
Event = {
   //页面加载完成后
   readyEvent: function(fn) {
       if (fn == null) {
           fn = document;
       }
    var oldonload = window.onload;
    if (typeof window.onload != 'function') {
         window.onload = fn;
    }else{
         window.onload = function() {
            oldonload();
            fn();
         };
    }
  },
    //视能力分别使用 demo0 || demo1 || IE 方式来绑定事件
    //参数：操作的元素，事件名称，事件处理程序
    addEvent: function(element,type,handler) {
        if (element.addEventListener) { //事件类型、需要执行的函数、是否捕捉
             element.addEventListener(type,handler,false);
        }else if (element.attachEvent) {
            element.attachEvent('on' + type, function() {
                  handler.call(element);
             });
        }else {
            element['on' + type] = handler;
        }
     },
    //移除事件
     removeEvent: function(element,type,handler) {
        if (element.removeEventListener) {
             element.removeEventListener(type,handler,false);
        }else if (element.datachEvent) {
             element.datachEvent('on' + type,handler);
        }else{
             element['on' + type] = null;
        }
      },
   //阻止事件（主要是事件冒泡，因为IE不支持事件捕获）
    stopPropagation: function(ev) {
        if (ev.stopPropagation) {
             ev.stopPropagation();
        }else {
             ev.cancelBubble = true;
        }
     },
   //取消事件的默认行为
    preventDefault: function(event) {
       if (event.preventDefault) {
            event.preventDefault();
       }else{
            event.returnValue = false;
       }
    },
   //获取事件目标
   getTarget: function(event) {
      return event.target || event.srcElemnt;
   },
   //获取event对象的引用，取到事件的所有信息，确保随时能使用event；
   getEvent: function(e) {
      var ev = e || window.event;
      if (!ev) {
          var c = this.getEvent.caller;
          while(c) {
              ev = c.argument[0];
              if (ev && Event == ev.constructor) {
                   break;
              }
              c = c.caller;
          }
      }
      retrun ev;
    }
};


//
怎样用js实现千位分隔符？


//-----------------------------------------------
第29题
var a = {}, b = Object.prototype;
[a.prototype === b, Object.getPrototypeOf(a) === b]
知识点:

Object/getPrototypeOf
只有 Function 拥有一个 prototype 的属性. 所以 a.prototype 为 undefined.

而 Object.getPrototypeOf(obj) 返回一个具体对象的原型(该对象的内部[[prototype]]值)

答案 false, true

第30题
function f() {}
var a = f.prototype, b = Object.getPrototypeOf(f);
a === b
f.prototype is the object that will become the parent of any objects created with new f while Object.getPrototypeOf returns the parent in the inheritance hierarchy.

f.prototype 是使用使用 new 创建的 f 实例的原型. 而 Object.getPrototypeOf 是 f 函数的原型.

请看:

a === Object.getPrototypeOf(new f()) // true
b === Function.prototype // true

答案 false


//正则
.匹配除了换行符以外的任意字符，也即是[^\n]，如果要包含任意字符，可使用(.|\n)



























